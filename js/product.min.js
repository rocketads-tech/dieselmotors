/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/product.js":
/*!***************************!*\
  !*** ./src/js/product.js ***!
  \***************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nlet thumbnails = document.querySelectorAll(\".product-slider__thumbnail\"),\r\n\tactiveThumbnail = document.getElementsByClassName(\r\n\t\t\".product-slider__thumbnail active\"),\r\n\tbuttonPrev = document.getElementById('arrowPrev'),\r\n\tbuttonNext = document.getElementById('arrowNext');\r\n\r\nconst mainImg = document.getElementById(\"featured\"),\r\n\tslider = document.querySelector(\".product-slider__thumbnails\"),\r\n\tproductCount = document.getElementById(\"productCount\"),\r\n  minusCount = document.getElementById(\"minus\"),\r\n\tplusCount = document.getElementById(\"plus\");\r\n\t\r\nconsole.log(productCount)\r\n\r\n\r\nlet srcset;\r\nlet src;\r\n\r\nfor (let i = 0; i < thumbnails.length; i++) {\r\n\r\n\tthumbnails[i].addEventListener(\"mouseover\", function () {\r\n\t\tthumbnails.forEach((el) => el.classList.remove(\"active\"));\r\n\r\n    this.classList.add(\"active\");\r\n    getSrc(thumbnails[i]);\r\n    setSrc(mainImg);\r\n  });\r\n}\r\n\r\nfunction getSrc(el) {\r\n  if (el.children[0].childElementCount > 0) {\r\n\t\tsrcset = el.children[0].children[0].srcset;\r\n    src = el.children[0].children[1].src;\r\n  } else {\r\n    src = el.children[0].src;\r\n\t}\r\n\treturn src, srcset\r\n}\r\n\r\nfunction setSrc(el) {\r\n  if (el.children[0].childElementCount > 0) {\r\n    el.children[0].children[0].srcset = srcset;\r\n    el.children[0].children[1].src = src;\r\n  } else {\r\n    el.children[0].src = src;\r\n  }\r\n  return el;\r\n}\r\n\r\nfunction scrollForFullScreen() {\r\n  buttonPrev.addEventListener(\"click\", function () {\r\n\t\tslider.scrollTop += slider.offsetWidth + 16;\r\n\t\tlet activeIndex = -1;\r\n    for (let i = 0; i < thumbnails.length; i++) {\r\n      if (thumbnails[i].className.includes(\"active\")) {\r\n        activeIndex = i;\r\n        let currentIndex = activeIndex + 1;\r\n        console.log(currentIndex);\r\n        thumbnails[i].classList.remove(\"active\");\r\n        thumbnails[currentIndex].classList.add(\"active\");\r\n        getSrc(thumbnails[currentIndex]);\r\n        setSrc(mainImg);\r\n        break;\r\n      }\r\n    }\r\n  });\r\n\tbuttonNext.addEventListener(\"click\", function () {\r\n\t\tslider.scrollTop -= slider.offsetWidth + 16;\r\n\t\tlet activeIndex = -1;\r\n    for (let i = 0; i < thumbnails.length; i++) {\r\n      if (thumbnails[i].className.includes(\"active\")) {\r\n        activeIndex = i;\r\n        let currentIndex = activeIndex - 1;\r\n        console.log(currentIndex);\r\n        thumbnails[i].classList.remove(\"active\");\r\n        thumbnails[currentIndex].classList.add(\"active\");\r\n        getSrc(thumbnails[currentIndex]);\r\n        setSrc(mainImg);\r\n        break;\r\n      }\r\n    }\r\n  });\r\n\r\n  const sliderScroll = () => {\r\n\r\n    if (slider.scrollTop === 0) {\r\n\t\t\tbuttonNext.classList.add(\"no-active\");\r\n    } else buttonNext.classList.remove(\"no-active\");\r\n    if (\r\n      Math.ceil(slider.scrollTop) ===\r\n\t\t\tslider.scrollHeight - slider.offsetHeight\r\n\t\t) {\r\n      buttonPrev.classList.add(\"no-active\");\r\n    } else buttonPrev.classList.remove(\"no-active\");\r\n  };\r\n  slider.addEventListener(\"scroll\", sliderScroll);\r\n}\r\n\r\nfunction scrollForMobScreen() {\r\n\tbuttonPrev.addEventListener(\"click\", function () {\r\n\t\tslider.scrollLeft += slider.offsetHeight + 8;\r\n\t\tlet activeIndex = -1;\r\n    for (let i = 0; i < thumbnails.length; i++) {\r\n      if (thumbnails[i].className.includes(\"active\")) {\r\n        activeIndex = i;\r\n        let currentIndex = activeIndex + 1;\r\n        console.log(currentIndex);\r\n        thumbnails[i].classList.remove(\"active\");\r\n        thumbnails[currentIndex].classList.add(\"active\");\r\n        getSrc(thumbnails[currentIndex]);\r\n        setSrc(mainImg);\r\n        break;\r\n      }\r\n    }\r\n  });\r\n  buttonNext.addEventListener(\"click\", function () {\r\n    slider.scrollLeft -= slider.offsetHeight + 8;\r\n    let activeIndex = -1;\r\n    for (let i = 0; i < thumbnails.length; i++) {\r\n      if (thumbnails[i].className.includes(\"active\")) {\r\n        activeIndex = i;\r\n        let currentIndex = activeIndex - 1;\r\n        console.log(currentIndex);\r\n        thumbnails[i].classList.remove(\"active\");\r\n        thumbnails[currentIndex].classList.add(\"active\");\r\n        getSrc(thumbnails[currentIndex]);\r\n        setSrc(mainImg);\r\n        break;\r\n      }\r\n    }\r\n  });\r\n\r\n  const sliderToScroll = () => {\r\n\r\n    if (slider.scrollLeft === 0) {\r\n      buttonNext.classList.add(\"no-active\");\r\n    } else buttonNext.classList.remove(\"no-active\");\r\n    if (\r\n      Math.ceil(slider.scrollLeft) ===\r\n      slider.scrollWidth - slider.offsetWidth\r\n    ) {\r\n      buttonPrev.classList.add(\"no-active\");\r\n    } else buttonPrev.classList.remove(\"no-active\");\r\n  };\r\n  slider.addEventListener(\"scroll\", sliderToScroll);\r\n}\r\n\r\nfunction executeFunctionBasedOnScreenWidth() {\r\n  if (window.innerWidth > 768) {\r\n    scrollForFullScreen();\r\n  } else {\r\n    scrollForMobScreen();\r\n    const currentHeight = mainImg.offsetWidth;\r\n    mainImg.style.height = currentHeight + \"px\";\r\n    mainImg.style.marginBottom = 12 + \"px\";\r\n  }\r\n}\r\n\r\nexecuteFunctionBasedOnScreenWidth();\r\n\r\nwindow.addEventListener(\"resize\", executeFunctionBasedOnScreenWidth);\r\n\r\nminusCount.addEventListener('click', () => {\r\n\tlet currentVal = parseInt(productCount.textContent, 10);\r\n\tcurrentVal > 0 ? productCount.innerText = currentVal - 1 : false;\r\n})\r\nplusCount.addEventListener('click', () => {\r\n\tlet currentVal = parseInt(productCount.textContent, 10);\r\n\tproductCount.innerText = currentVal + 1;\r\n});\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://gulp2022/./src/js/product.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/product.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;